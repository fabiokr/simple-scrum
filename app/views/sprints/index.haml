#search
  - form_for @search do |f|
    %fieldset
      %legend= t('system.search_legend')
      - f.fields_for @search.conditions do |sprints|
        %p
          = sprints.label :name_keywords, t('activerecord.attributes._all.name')
          %br
          = sprints.text_field :name_keywords, :class => 'text'

      = button_tag t('system.search'), :find, :class => 'search'

= link_to "#{icon(:page_add)}#{t('app.sprint.new')}", new_sprint_path, :class => 'button'
%br
%br

%table
  %caption
    %h3= "#{t('app.sprint.listing')} - #{t('system.found_registries', :count => @sprints_count)}"
  %thead
    %tr
      %th= order_by_link(:name, :text => t('activerecord.attributes._all.name'))
      %th= order_by_link({:backlog => :project_name}, :text => t('activerecord.models.backlog'))
      %th= order_by_link(:start, :text => t('activerecord.attributes.sprint.start'))
      %th= order_by_link(:end, :text => t('activerecord.attributes.sprint.end'))
      %th= order_by_link(:created_at, :text => t('activerecord.attributes._all.created_at'))
      %th= order_by_link(:updated_at, :text => t('activerecord.attributes._all.updated_at'))
      %th
      %th
      %th
  %tbody
    - for sprint in @sprints
      %tr
        %td= h sprint.name
        %td= h sprint.backlog.project_name unless sprint.backlog.nil?
        %td= h sprint.start.to_formatted_s(:short)
        %td= h sprint.end.to_formatted_s(:short)
        %td= h sprint.created_at.to_formatted_s(:short)
        %td= h sprint.updated_at.to_formatted_s(:short)
        %td= link_to icon(:page), sprint_path(sprint), :alt => t('system.show'), :title => t('system.show')
        %td= link_to icon(:page_edit), edit_sprint_path(sprint), :alt => t('system.edit'), :title => t('system.edit')
        %td= link_to icon(:page_delete), sprint_path(sprint), :confirm => t('system.confirm'), :method => :delete, :alt => t('system.destroy'), :title => t('system.destroy')
- if @search.page_count > 0
  .pagination= page_links :prev => t('system.previous_label'), :next => t('system.next_label')

